'''1. lets assume that a perfect number is defined such as for perfect number, the digits in the number from left to right is either equal or increasing. define a a logic that checks if a number is perfect number or not.
	for example 12345678, 1111111114 and 1122334455 are examples of perfect numbers, whereas 12343, 98765 are examples of non-perfect numbers
'''
'''	
2.  a list of postive numbers is given. calculate the maximum possible value that we can get by multiplying any two numbers from the list. 
2.  a list of postive numbers is given. calculate the maximum possible value that we can get by multiplying any two numbers from the list.
extra points for achieving this in a solution with time complexity less than o[n^2]'''

'''
3. Consider the following operation on an arbitrary positive integer:
>>If the number is even, divide it by two.
>>If the number is odd, triple it and add one.
Collatz conjecture named after mathematician Lothar Collatz says that, does not matter which number we start with,
if we continue performing the above operation, we will end up with 1 at some point.
Now calculate how many operations are needed for a given number to reach 1
for example if given number is 7, the sequence of number generated by the operation will
be 7 > 22 > 11 > 34 > 17 > 52 > 26 > 13 > 40 > 20 > 10 > 5 > 16 > 8 > 4 > 2 > 1. Thus number of operation need to reach 1 from 7 is 16
another example if given number is 21, the sequnce of number generated by the operation will be 21 > 64 > 32 > 16 > 8 > 4 >  2 > 1.
Thus number of operations needed to reach 1 from 21 is 7.'''

'''4. For a given string calculate how many vowels are there in the string. set of vowels are defined by ('a', 'e', 'i', 'o', 'u'). 
	for example in "I like python" has one 'e', two 'i', and one 'o'. Thus total number of vowels are 4.'''

'''4. for a given string calculate a character map of which non-white space character apears how many times.
	for example, in "perfect" we have p - 1, e - 2, r-1, f-1, c-1 and t-1 times
	in "example" we have e - 2, x-1, a-1, m-1, p-1, l-1 times
'''

'''
st='hello'
h=e=l=o=0
for i in st:
    if 'h' is i:
        h+=1
    elif 'e' is i:
        e+=1
    elif 'l' is i:
        l+=1
    elif 'o' is i:
        o+=1
print('h=',h,'e=',e,'l=',l,'o=',o)'''

st='hello world'


num=23
c=0
while num >=1:
    if num %2==0:
        num//=2
    else:
       num= 1+num*3
print(num)    
        

        
        
    
